% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/optimizeNewParam.R
\name{optimizeNewData}
\alias{optimizeNewData}
\title{Perform factorization for new data}
\usage{
optimizeNewData(
  object,
  new.data,
  which.datasets,
  add.to.existing = TRUE,
  lambda = NULL,
  thresh = 1e-04,
  max.iters = 100,
  verbose = getOption("ligerVerbose")
)
}
\arguments{
\item{object}{\linkS4class{liger} object. Should call
\code{\link{optimizeALS}} in advance.}

\item{new.data}{Named list of raw count matrices (one or more).}

\item{which.datasets}{Names of datasets to append new data to if
\code{add.to.existing = TRUE}, or the names of datasets to inherit \eqn{V}
matrices from and initialize the optimization when \code{add.to.existing =
FALSE}. Should match the length and order of \code{new.data}.}

\item{add.to.existing}{Logical, whether to add the new data to existing
datasets or treat as totally new datasets (i.e. calculate new \eqn{V}
matrices). Default \code{TRUE}.}

\item{lambda}{Regularization parameter. Default \code{NULL} uses the lambda
last used for factorization, stored at
\code{object@uns$factorization$lambda}.}

\item{thresh}{Convergence threshold. Convergence occurs when
\eqn{|obj_0-obj|/(mean(obj0,obj)) < thresh}. Default \code{1e-4}.}

\item{max.iters}{Maximum number of block coordinate descent iterations to
perform. Default \code{100}.}

\item{verbose}{Logical. Whether to show information of the progress. Default
\code{getOption("ligerVerbose")} which is \code{TRUE} if users have not set.}
}
\value{
\code{object} with \code{W} slot updated with the new \eqn{W}
matrix, and the \code{H} and \code{V} slots of each
\linkS4class{ligerDataset} object in the \code{datasets} slot updated with
the new dataset specific \eqn{H} and \eqn{V} matrix, respectively.
}
\description{
Uses an efficient strategy for updating that takes advantage of
the information in the existing factorization. Assumes that variable featuers
are represented in the new datasets.
}
\examples{
pbmc <- normalize(pbmc)
pbmc <- selectGenes(pbmc)
pbmc <- scaleNotCenter(pbmc)
# Only running a few iterations for fast examples
pbmc <- optimizeALS(pbmc, k = 20, maxIter = 2)
# Create fake new data by increasing all non-zero count in "ctrl" by 1,
# and make unique cell identiciers
ctrl2 <- rawData(dataset(pbmc, "ctrl"))
ctrl2@x <- ctrl2@x + 1
colnames(ctrl2) <- paste0(colnames(ctrl2), 2)
pbmcNew <- optimizeNewData(pbmc, new.data = list(ctrl2 = ctrl2),
                           which.datasets = "ctrl", max.iters = 2)
pbmcNew
}
\seealso{
\code{\link{optimizeALS}}
}
