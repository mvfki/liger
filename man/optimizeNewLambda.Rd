% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/optimizeNewParam.R
\name{optimizeNewLambda}
\alias{optimizeNewLambda}
\title{Perform factorization for new lambda value}
\usage{
optimizeNewLambda(
  object,
  new.lambda,
  thresh = 1e-04,
  max.iters = 100,
  rand.seed = 1,
  verbose = getOption("ligerVerbose")
)
}
\arguments{
\item{object}{\linkS4class{liger} object. Should call
\code{\link{optimizeALS}} in advance.}

\item{new.lambda}{Numeric regularization parameter. Larger values penalize
dataset-specific effects more strongly.}

\item{thresh}{Convergence threshold. Convergence occurs when
\eqn{|obj_0-obj|/(mean(obj_0,obj)) < thresh}. Default \code{1e-4}.}

\item{max.iters}{Maximum number of block coordinate descent iterations to
perform. Default \code{100}.}

\item{rand.seed}{Random seed to allow reproducible results. Default \code{1}.}

\item{verbose}{Logical. Whether to show information of the progress. Default
\code{getOption("ligerVerbose")} which is \code{TRUE} if users have not set.}
}
\value{
Input \code{object} with optimized factorization values updated.
including the \code{W} matrix in \linkS4class{liger} object, and \code{W} and
\code{V} matrices in each \linkS4class{ligerDataset} object in the
\code{datasets} slot.
}
\description{
Uses an efficient strategy for updating that takes advantage of
the information in the existing factorization; uses previous k. Recommended
mainly when re-optimizing for higher lambda and when new lambda value is
significantly different; otherwise may not return optimal results.
}
\examples{
pbmc <- normalize(pbmc)
pbmc <- selectGenes(pbmc)
pbmc <- scaleNotCenter(pbmc)
pbmc <- optimizeALS(pbmc, k = 20, maxIter = 5)
pbmc <- optimizeNewLambda(pbmc, new = 5.5, max.iters = 10)
}
