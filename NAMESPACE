# Generated by roxygen2: do not edit by hand

S3method(fortify,liger)
export(as.ligerDataset)
export(calcARI)
export(calcAgreement)
export(calcAlignment)
export(calcAlignmentPerCluster)
export(calcDatasetSpecificity)
export(calcNormLoadings)
export(calcPurity)
export(createLiger)
export(createLigerDataset)
export(createLigerDataset.h5)
export(downsample)
export(getFactorMarkers)
export(getGeneValues)
export(getProportionMito)
export(imputeKNN)
export(isH5Liger)
export(linkGenesAndPeaks)
export(louvainCluster)
export(louvainClusterOld)
export(makeFeatureMatrix)
export(makeInteractTrack)
export(makeRiverplot)
export(mergeH5)
export(normalize)
export(online_iNMF)
export(optimizeALS)
export(optimizeNewData)
export(optimizeNewDataOld)
export(optimizeNewK)
export(optimizeNewLambda)
export(optimizeSubset)
export(peak)
export(plotByDatasetAndCluster)
export(plotByDatasetAndClusterOld)
export(plotCellScatter)
export(plotCellViolin)
export(plotClusterFactors)
export(plotClusterProportions)
export(plotFactors)
export(plotFeatureOld)
export(plotGene)
export(plotGeneDetectedViolin)
export(plotGeneLoadings)
export(plotGeneViolin)
export(plotGenes)
export(plotQCMetric)
export(plotTotalCountViolin)
export(plotVarFeatures)
export(plotWordClouds)
export(quantileAlignSNF)
export(read10X)
export(readSubset)
export(removeMissing)
export(restoreH5Liger)
export(restoreOnlineLigerWrong)
export(retrieveCellFeature)
export(runGSEA)
export(runGeneralQC)
export(runTSNE)
export(runTSNEOld)
export(runUMAP)
export(runUMAPOld)
export(runWilcoxon)
export(scaleNotCenter)
export(selectGenes)
export(subsetH5LigerDataset)
export(subsetLiger)
export(subsetLigerDataset)
export(subsetMemLigerDataset)
export(suggestK)
export(suggestLambda)
exportClasses(ligerATACDataset)
exportClasses(ligerDataset)
exportClasses(ligerRNADataset)
exportMethods("[")
exportMethods("cell.meta<-")
exportMethods("dataset<-")
exportMethods("datasets<-")
exportMethods("feature.meta<-")
exportMethods("h5file.info<-")
exportMethods("norm.data<-")
exportMethods("peak<-")
exportMethods("raw.data<-")
exportMethods("scale.data<-")
exportMethods("var.features<-")
exportMethods(as.ligerDataset)
exportMethods(cell.meta)
exportMethods(dataset)
exportMethods(datasets)
exportMethods(feature.meta)
exportMethods(getH5File)
exportMethods(getMatrix)
exportMethods(h5file.info)
exportMethods(norm.data)
exportMethods(optimizeALS)
exportMethods(peak)
exportMethods(quantile_norm)
exportMethods(raw.data)
exportMethods(scale.data)
exportMethods(var.features)
import(Matrix)
import(doParallel)
import(parallel)
importClassesFrom(S4Vectors,DataFrame)
importClassesFrom(SeuratObject,Seurat)
importClassesFrom(SingleCellExperiment,SingleCellExperiment)
importFrom(FNN,get.knn)
importFrom(FNN,get.knnx)
importFrom(Matrix,colSums)
importFrom(Matrix,rowMeans)
importFrom(Matrix,rowSums)
importFrom(Matrix,sparseMatrix)
importFrom(Matrix,t)
importFrom(Rtsne,Rtsne)
importFrom(dplyr,"%>%")
importFrom(dplyr,group_by)
importFrom(dplyr,group_cols)
importFrom(dplyr,mutate_at)
importFrom(dplyr,vars)
importFrom(foreach,"%dopar%")
importFrom(foreach,foreach)
importFrom(ggplot2,fortify)
importFrom(grDevices,colorRampPalette)
importFrom(grDevices,dev.off)
importFrom(grDevices,hcl)
importFrom(grDevices,heat.colors)
importFrom(grDevices,pdf)
importFrom(graphics,barplot)
importFrom(ica,icafast)
importFrom(irlba,prcomp_irlba)
importFrom(mclust,adjustedRandIndex)
importFrom(methods,"slot<-")
importFrom(methods,.hasSlot)
importFrom(methods,as)
importFrom(methods,is)
importFrom(plyr,mapvalues)
importFrom(riverplot,makeRiver)
importFrom(riverplot,riverplot)
importFrom(rlang,.data)
importFrom(stats,complete.cases)
importFrom(stats,heatmap)
importFrom(stats,loadings)
importFrom(stats,p.adjust)
importFrom(stats,pnorm)
importFrom(stats,quantile)
importFrom(stats,runif)
importFrom(stats,wilcox.test)
importFrom(utils,capture.output)
importFrom(utils,read.csv2)
importFrom(utils,read.delim)
importFrom(utils,read.table)
importFrom(utils,setTxtProgressBar)
importFrom(utils,txtProgressBar)
importFrom(utils,write.table)
useDynLib(rliger, .registration = TRUE)
